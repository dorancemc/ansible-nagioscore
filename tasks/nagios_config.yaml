---

- name: create temporary directory
  tempfile:
    state: directory
    suffix: nagios
  register: tempfolder
  changed_when: false

- name: assets folder creation
  file:
    path: "{{ tempfolder.path }}/{{ item|basename }}"
    state: directory
    owner: "{{ nagios.user }}"
    group: "{{ nagios.group }}"
    mode: 0750
  with_items: "{{ nagios_config_parameters.cfg_dir }}"
  changed_when: false

- name: change tempfile ownership
  ansible.builtin.file:
    path: "{{ tempfolder.path }}"
    owner: "{{ nagios.user }}"
    group: "{{ nagios.group }}"
  changed_when: false

- name: folders synchronization to temp folder
  synchronize:
    src: "{{ nagios.etc_path }}/{{ item|basename }}/"
    dest:  "{{ tempfolder.path }}/{{ item|basename }}/"
    owner: yes
    group: yes
    perms: yes
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - "{{ nagios_config_parameters.cfg_dir }}"
  changed_when: false
  when: not nagios_clean_assets

- name: files synchronization to temp folder
  synchronize:
    src: "{{ nagios.etc_path }}/{{ item }}"
    dest:  "{{ tempfolder.path }}/{{ item }}"
    owner: yes
    group: yes
    perms: yes
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - nagios.cfg
    - resource.cfg
  changed_when: false
  when: not nagios_clean_assets

- name: update resource config
  template:
    src: nagios/etc/{{ item }}
    dest: "{{ tempfolder.path }}/{{ item }}"
    mode: 0664
  with_items:
    - resource.cfg
  register: resourcecfg

- name: update nagios config
  template:
    src: nagios/etc/{{ item }}
    dest: "{{ tempfolder.path }}/{{ item }}"
    mode: 0664
  with_items:
    - nagios.cfg
  register: nagioscfg

- name: modify temp path for nagios.cfg file
  replace:
    path: "{{ tempfolder.path }}/nagios.cfg"
    regexp: '{{ nagios.etc_path }}'
    replace: '{{ tempfolder.path }}'
  changed_when: false

#templates
- name: create nagios templates config
  template:
    src: "nagios/etc/templates/{{ item }}"
    dest: "{{ tempfolder.path }}/templates/{{ item }}"
    mode: 0664
  with_items:
    - commands.cfg
    - contact_templates.cfg
    - host_templates.cfg
    - service_templates.cfg
    - time_templates.cfg

- name: create assets config
  template:
    src: "nagios/etc/assets/{{ item }}"
    dest: "{{ tempfolder.path }}/assets/{{ item }}"
    mode: 0664
  with_items:
    - contacts.cfg
    - groups_definition.cfg

- name: list clients config
  set_fact:
    _nagios_hosts_files: "{{ _nagios_hosts_files|default([]) + [item.src] }}"
  with_community.general.filetree: "{{ nagios_hosts_path }}/"
  when: nagios_hosts_path is defined and item.state=='file'

# - name: create assets config
#   include: "host_definition.yaml"
#   with_items: "{{ _nagios_hosts_files }}"
#   when: _nagios_hosts_files is defined

#validations
- name: run command checking nagios config
  shell: "{{ nagios.command }} -v {{ tempfolder.path }}/nagios.cfg"
  register: nagios_conf_validation
  ignore_errors: yes
  changed_when: false

- debug:
    msg: "{{ nagios_conf_validation.stdout_lines }}"

- name: update users to htpasswd file
  include: "nagios_httpasswd.yaml"
  with_items: "{{ contacts }}"
  loop_control:
    loop_var: _contact
  no_log: yes
  when: nagios_conf_validation is defined and nagios_conf_validation.rc == 0

- name: update resource config
  template:
    src: nagios/etc/{{ item }}
    dest: "{{ nagios.etc_path }}/{{ item }}"
    mode: 0664
  with_items:
    - resource.cfg
  when: resourcecfg.changed and nagios_conf_validation.rc == 0
  notify: reload nagios

- name: update nagios config
  template:
    src: nagios/etc/{{ item }}
    dest: "{{ nagios.etc_path }}/{{ item }}"
    mode: 0664
  with_items:
    - nagios.cfg
  when: nagioscfg.changed and nagios_conf_validation.rc == 0
  notify: reload nagios

- name: folders synchronization to temp folder
  synchronize:
    src:  "{{ tempfolder.path }}/{{ item|basename }}/"
    dest: "{{ nagios.etc_path }}/{{ item|basename }}/"
    owner: yes
    group: yes
    perms: yes
    delete: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - "{{ nagios_config_parameters.cfg_dir }}"
  when: nagios_conf_validation.rc == 0
  notify: reload nagios

- name: remove temp folder
  file:
    path: "{{ tempfolder.path }}"
    state: absent
  when: tempfolder.path is defined and nagios_conf_validation.rc == 0
  changed_when: false
